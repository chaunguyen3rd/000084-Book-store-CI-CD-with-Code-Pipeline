[
{
	"uri": "/vi/1-preparation/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trước khi thực hiện nội dung chính của workshop này, chúng ta chuẩn bị sam project và tải source của front-end về máy của bạn.\n Tải source code của sam project dưới đây  \r\rSAM source\r\r\rfcj-book-store-sam-ws7.zip\r\r(8275 ko)\r\r\r\rChạy câu lệnh dưới đây để build project  sam build Thực hiện câu lệnh dưới đây để tải code fcj-serverless-frontend về máy của bạn  git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop Thực hiện câu lệnh dưới đây tại thư mục gốc của fcj-serverless-frontend để build project  yarn build Chúng ta đã chuẩn bị xong source cần thiết cho các bước tiếp theo.\n"
},
{
	"uri": "/vi/",
	"title": "Serverless - CI/CD với CodePipeline",
	"tags": [],
	"description": "",
	"content": "Serverless - CI/CD với CodePipeline Tổng quan Continuous Integration, Continuous Delivery, Continuous Deployment (CI/CD) là các phương pháp phát triển phần mềm để sản xuất phần mềm trong các chu kỳ ngắn giữa hợp nhất thay đổi mã nguồn và cập nhật ứng dụng. Mục tiêu cuối của các phương pháp này là giảm chi phí, thời gian và rủi ro bằng cách phân phối phần mềm thành các phần nhỏ.\nTrong bài số 7 của series này, chúng ta sẽ tìm hiểu về cách xây dựng luồng CI/CD để mỗi khi bạn thay đổi source của ứng dụng và đưa lên git repository, nó sẽ được tự động cập nhật lại các dịch vụ và ứng dụng của chúng ta. Có rất nhiều tool để ta xây dựng CI/CD, phổ biến nhất là Jenkins, Gitlab CI, Circle CI. Trong bài này chúng ta sẽ sử dụng CodePipeline của AWS.\nKiến trúc CI/CD cho back-end:  Nhà phát triển tạo một git repo trên CodeCommit và đưa code của SAM project lên đó Mỗi khi source code được cập nhật, CodeBuild sẽ tự động build lại và chuẩn bị CloudFormation template CloudFormation tạo/cập nhật các dịch vụ không máy chủ  Kiến trúc CI/CD cho front-end của web:\n Nhà phát triển tạo một git repo trên CodeCommit và đưa front-end code lên đó Mỗi khi source code được cập nhật, CodeBuild sẽ tự động build lại sau đó đóng gói thư mục build Cuối cùng thư mục build được đẩy vào S3 bucket với static hosting website đã được kích hoạt  CI/CD CI\nContinuous Integration là một phương pháp phát triển phần mềm mà trong đó các nhà phát triển thường xuyên commit và push các thay đổi lên các shared repository. Bằng cách nạp và hợp nhất các thay đổi từ nhiều nhà phát triển khác nhau, vì vậy giảm thiểu nguy cơ xung đột. Trước mỗi lần commit, các nhà phát triển có thể chạy các unit test trên mã nguồn như một kiểm tra bổ sung trước khi tích hợp. Một continuous integration tự động build và chạy các bài kiểm tra trên các mã nguồn thay đổi để phát hiện bất kỳ lỗi nào ngay lập tức.\nCD\nContinuous Delivery là một phương pháp phát triển phần mềm mở rộng Continuous Integration trong đó mã nguồn được tự động chuẩn bị để triển khai cho một production instance. Sau khi build, build artifact với các thay đổi mới được triển khai cho một staging instance nơi chạy các bài kiểm tra nâng cao (integration, acceptance, load, end-to-end, etc.). Nếu cần, build artifact tự động được triển khai tới production instance sau khi được duyệt thủ công\nContinuous Delivery là một phương pháp phát triển phần mềm mở rộng Continuous Delivery trong đó các thay đổi mã nguồn được triển khai tự động đến một production instance. Sự khác biệt giữa Continuous Delivery và Continuous Deployment ở bước kiểm duyệt thủ công. Với Continuous Delivery, việc triển khai diễn ra tự động sau khi kiểm duyệt thủ công. Với Continuous Delivery, việc triển khai diễn ra tự động mà không cần phê duyệt thủ công.\nNội dung  Chuẩn bị Xây dựng SAM pipeline Xây dụng pipeline cho frontend Kiểm tra hoạt động Dọn dẹp tài nguyên  "
},
{
	"uri": "/vi/2-build-sam-pipeline/2-1-create-git-repo/",
	"title": "Tạo Git repository",
	"tags": [],
	"description": "",
	"content": " Chạy câu lệnh dưới đây để tạo CodeCommit repository mới  aws codecommit create-repository --repository-name fcj-book-store-backend Bạn sẽ thấy đầu ra tương tự như sau\n{\r\u0026#34;repositoryMetadata\u0026#34;: {\r\u0026#34;accountId\u0026#34;: \u0026#34;111111111111\u0026#34;,\r\u0026#34;repositoryId\u0026#34;: \u0026#34;b782c34e-77dc-4627-8aea-ae8bd5ea46c3\u0026#34;,\r\u0026#34;repositoryName\u0026#34;: \u0026#34;fcj-book-store-backend\u0026#34;,\r\u0026#34;lastModifiedDate\u0026#34;: \u0026#34;2022-09-19T11:49:51.325000+07:00\u0026#34;,\r\u0026#34;creationDate\u0026#34;: \u0026#34;2022-09-19T11:49:51.325000+07:00\u0026#34;,\r\u0026#34;cloneUrlHttp\u0026#34;: \u0026#34;https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-backend\u0026#34;,\r\u0026#34;cloneUrlSsh\u0026#34;: \u0026#34;ssh://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-backend\u0026#34;,\r\u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:codecommit:ap-southeast-1:111111111111:fcj-book-store-backend\u0026#34;\r}\r}  Mở bảng điều khiển của CodeCommit để kiểm tra repository  Chạy các câu lệnh dưới đây tại thư mục sam project mà bạn đã tải - fcj-book-store-sam-ws7 để khởi tạo một Git repository cục bộ, thêm code và đẩy lên CodeCommit repository.  git init -b main\recho -e \u0026#34;\\n\\n.aws-sam\u0026#34; \u0026gt;\u0026gt; .gitignore\rgit add .\rgit commit -m \u0026#34;Initial commit\u0026#34; Thêm URL của CodeCommit repository mà bạn đã tạo làm remote trên git project cục bộ  git remote add origin codecommit://fcj-book-store-backend \rNếu origin đã tồn tại hoặc url bị sai, có thể xoá bằng cách chạy: git remote rm origin\n\rĐẩy code lên CodeCommit repository bằng câu lệnh dưới đây:  git push -u origin main Quay lại với bảng điều khiển của CodeCommit   Ấn vào repository fcj-book-store-backend, bạn sẽ thấy code đã được đẩy lên  "
},
{
	"uri": "/vi/3-build-frontend-pipeline/3-1-create-git-repo/",
	"title": "Tạo Git repository ",
	"tags": [],
	"description": "",
	"content": " Cập nhật lại code của front-end   Mở tệp config.js trong thư mục source code của front-end mà bạn đã tải - fcj-serverless-frontend. Sau đó thay giá trị của APP_API_URL bằng URL mà bạn đã ghi lại từ bước trước Bỏ comment dòng số 4 và thay giá trị bằng email mà bạn sẽ đăng ký tài khoản   Mở tệp Login.js trong thư mục fcj-serverless-frontend/src/component/Authen/, bỏ comment dòng số 39 và 41  Tạo một tệp mới tên là buildspect.yaml trong thư mục fcj-serverless-frontend/. Sao chép script dưới vào tệp đó  version: 0.2\rphases:\rinstall:\rruntime-versions:\rnodejs: latest\rcommands:\r# install yarn\r- npm install yarn\r# install dependencies\r- yarn\r# so that build commands work\r- yarn add eslint-config-react-app\rbuild:\rcommands:\r# run build script\r- yarn build\rartifacts:\r# include all files required to run application\r# we include only the static build files\rfiles:\r- \u0026#39;**/*\u0026#39;\rbase-directory: \u0026#39;build\u0026#39; Chạy câu lệnh dưới đây để tạo CodeCommit repository cho code của front-end  aws codecommit create-repository --repository-name fcj-book-store-frontend Bạn sẽ thấy đầu ra tương tự như sau\n{\r\u0026#34;repositoryMetadata\u0026#34;: {\r\u0026#34;accountId\u0026#34;: \u0026#34;111111111111\u0026#34;,\r\u0026#34;repositoryId\u0026#34;: \u0026#34;b782c34e-77dc-4627-8aea-ae8bd5ea79a9\u0026#34;,\r\u0026#34;repositoryName\u0026#34;: \u0026#34;fcj-book-store-frontend\u0026#34;,\r\u0026#34;lastModifiedDate\u0026#34;: \u0026#34;2022-09-19T14:49:51.325000+07:00\u0026#34;,\r\u0026#34;creationDate\u0026#34;: \u0026#34;2022-09-19T14:49:51.325000+07:00\u0026#34;,\r\u0026#34;cloneUrlHttp\u0026#34;: \u0026#34;https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-frontend\u0026#34;,\r\u0026#34;cloneUrlSsh\u0026#34;: \u0026#34;ssh://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-frontend\u0026#34;,\r\u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:codecommit:ap-southeast-1:111111111111:fcj-book-store-frontend\u0026#34;\r}\r}  Mở bảng điều khiển của CodeCommit để kiểm tra repository  Chạy các câu lệnh dưới đây tại tư mục gốc của front-end project để khởi tạo một Git repository cục bộ, thêm code và đẩy lên CodeCommit repository.  git init -b main\rgit add .\rgit commit -m \u0026#34;Initial commit\u0026#34; Thêm URL của CodeCommit repository mà bạn đã tạo làm remote trên git project cục bộ  git remote add origin codecommit://fcj-book-store-frontend \rNếu origin đã tồn tại hoặc url bị sai, có thể xoá bằng cách chạy: git remote rm origin\n\rĐẩy code lên CodeCommit repository bằng câu lệnh dưới đây:  git push -u origin main Quay lại với bảng điều khiển của CodeComit   Ấn vào repository fcj-book-store-frontend, bạn sẽ thấy code đã được đẩy lên  "
},
{
	"uri": "/vi/3-build-frontend-pipeline/3-2-create-codepipeline/",
	"title": "Tạo pipeline ",
	"tags": [],
	"description": "",
	"content": " Tại bảng điều khiển của CodeCommit, ấn Pipeline-CodePipeline ở menu phía bên trái   Ấn Getting started Ấn Create pipeline  Nhập tên cho pipeline: fcj-book-store-frontend-pipeline   Chọn New service role để tạo role mới Ấn Next  Chọn AWS CodeCommit là nhà cũng cấp source   Chọn repository là fcj-book-store-frontend Chọn nhánh main Ấn Next  Chọn AWS CodeBuild là nhà cung cấp để xây dựng   Chọn region cùng với region của SAM pipeline Ấn Create new project  Nhập tên cho project: fcj-book-store-frontend   Chọn Ubuntu cho OS  Chọn Standard cho mục Rumtime(s)   Chọn aws/codebuild/standard:5.0 cho mục Image  Bạn có thể nhập buildspec.yaml vào mục tên của Buildspec hoặc không   Ấn Continue to CodePipeline  Chọn project bạn vừa tạo   Ấn Next  Chọn Amazon S3 là nhà cung cấp triển khai   Chọn bucket fcj-book-store Tích vào Extract file before deploy Ấn Next  Kéo xuống cuối trang và ấn Create pipeline  Chờ một lúc để pipeline được xử lý đến khi thành công  Mở bảng điều khiển của Amazon S3  Ấn vào bucket fcj-book-store  Các tập và thư mục sau khi build đã được triển khi trên S3 bucket  Ấn sang tab Propertíe  Kéo xuống cuối trang và ấn vào endpoint của trang web  Vậy là chúng ta đã triển khai xong một pipeline mới cho phần source code của front-end. Bước tiếp theo chúng ta sẽ kiểm tra web chạy.\n"
},
{
	"uri": "/vi/2-build-sam-pipeline/2-2-create-pipeline/",
	"title": "Tạo SAM pipeline",
	"tags": [],
	"description": "",
	"content": "Tạo SAM Pipeline với nhà cung cấp là CodePipeline sẽ có 3 bước riêng biệt sau:\n Tạo cơ sở hạ tầng và IAM roles cần thiết Tạo mẫu CloudFormation pipeline Triển khai mẫu CloudFormation pipeline SAM Pipeline sẽ tự động hoá tất cả các bước trên.  Tạo cơ sở hạ tầng và IAM roles cần thiết  Chạy câu lệnh sau:  sam pipeline init --bootstrap Trả lời các câu hỏi với theo danh sách dưới đây:   Select a pipeline template to get started: AWS Quick Start Pipeline Templates (1) Select CI/CD system: AWS CodePipeline (5) Do you want to go through stage setup process now? [y/N]: y [1] Stage definition. Stage configuration name: dev [2] Account details. Select a credential source to associate with this stage: default (named profile) (2) Enter the region in which you want these resources to be created: Your region of choice Enter the pipeline IAM user ARN if you have previously … [] return/enter Enter the pipeline execution role ARN if you have previously … []: return/enter Enter the CloudFormation execution role ARN if you have previously … []: return/enter Please enter the artifact bucket ARN for your Lambda function. If you do not … []: return/enter Does your application contain any IMAGE type Lambda functions? [y/N]: N Press enter to confirm the values above … : return/enter Should we proceed with the creation? [y/N]: y  sam pipeline init generates a pipeline configuration file that your CI/CD system\rcan use to deploy serverless applications using AWS SAM.\rWe will guide you through the process to bootstrap resources for each stage,\rthen walk through the details necessary for creating the pipeline config file.\rPlease ensure you are in the root folder of your SAM application before you begin.\rSelect a pipeline template to get started:\r1 - AWS Quick Start Pipeline Templates\r2 - Custom Pipeline Template Location\rChoice: 1\rCloning from https://github.com/aws/aws-sam-cli-pipeline-init-templates.git (process may take a moment)\rSelect CI/CD system\r1 - Jenkins\r2 - GitLab CI/CD\r3 - GitHub Actions\r4 - Bitbucket Pipelines\r5 - AWS CodePipeline\rChoice: 5\rYou are using the 2-stage pipeline template.\r_________ _________ | | | |\r| Stage 1 |-\u0026gt;| Stage 2 |\r|_________| |_________|\rChecking for existing stages...\r[!] None detected in this account.\rDo you want to go through stage setup process now? If you choose no, you can still reference other bootstrapped resources. [y/N]: y\rFor each stage, we will ask for [1] stage definition, [2] account details, and [3]\rreference application build resources in order to bootstrap these pipeline\rresources.\rWe recommend using an individual AWS account profiles for each stage in your\rpipeline. You can set these profiles up using aws configure or ~/.aws/credentials. See\r[https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started-set-up-credentials.html].\rStage 1 Setup\r[1] Stage definition\rEnter a configuration name for this stage. This will be referenced later when you use the sam pipeline init command:\rStage configuration name: dev\r[2] Account details\rThe following AWS credential sources are available to use.\rTo know more about configuration AWS credentials, visit the link below:\rhttps://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html 1 - Environment variables (not available)\r2 - default (named profile)\r3 - produser (named profile)\rq - Quit and configure AWS credentials\rSelect a credential source to associate with this stage: 2\rAssociated account 885078239936 with configuration dev.\rEnter the region in which you want these resources to be created [ap-southeast-1]: ap-southeast-1\rEnter the pipeline IAM user ARN if you have previously created one, or we will create one for you []: [3] Reference application build resources\rEnter the pipeline execution role ARN if you have previously created one, or we will create one for you []: Enter the CloudFormation execution role ARN if you have previously created one, or we will create one for you []: Please enter the artifact bucket ARN for your Lambda function. If you do not have a bucket, we will create one for you []: Does your application contain any IMAGE type Lambda functions? [y/N]: n\r[4] Summary\rBelow is the summary of the answers:\r1 - Account: 885078239936\r2 - Stage configuration name: dev\r3 - Region: ap-southeast-1\r4 - Pipeline user: [to be created]\r5 - Pipeline execution role: [to be created]\r6 - CloudFormation execution role: [to be created]\r7 - Artifacts bucket: [to be created]\r8 - ECR image repository: [skipped]\rPress enter to confirm the values above, or select an item to edit the value: This will create the following required resources for the \u0026#39;dev\u0026#39; configuration: - Pipeline IAM user\r- Pipeline execution role\r- CloudFormation execution role\r- Artifact bucket\rShould we proceed with the creation? [y/N]: y\rCreating the required resources...\rChecking for existing stages... Sau khi hoàn tất, bạn sẽ thấy đầu ra giống như sau:\nSuccessfully created!\rThe following resources were created in your account:\r- Pipeline IAM user\r- Pipeline execution role\r- CloudFormation execution role\r- Artifact bucket\rPipeline IAM user credential:\rAWS_ACCESS_KEY_ID: AAAAAAAAAAAAIFRDVPDX\rAWS_SECRET_ACCESS_KEY: xxxxxxxxxxxxxxxxxxxxxxkMYI9RatNgVcIybUwh Mở bảng điểu khiển của CloudFormation  Ấn Stacks ở menu phía bên trái để kiểm tra xem stack đã được tạo chưa.   Ấn vào stack đang hiển thị  Ấn sang tab Resources, các tài nguyên đã được khởi tạo  Quay lại với màn hình tạo SAM pipeline   Nhập \u0026ldquo;N\u0026rdquo; để không tạo stage thứ 2.  Tạo mẫu CloudFormation pipeline Chúng ta tiếp tục tạo mẫu CloudFormation xác định toàn bộ CI/CD pipeline\n Nhập các câu trả lời theo dánh sách dưới đây   What is the Git provider? Choice []: CodeCommit (2) What is the CodeCommit repository name?: fcj-book-store-backend What is the Git branch used for production deployments? [main]: main What is the template file path? [template.yaml]: template.yaml Select an index or enter the stage 1’s configuration name (as provided during the bootstrapping): 1 What is the sam application stack name for stage 1? [sam-app]: fcj-book-store-backend-dev Select an index or enter the stage 2’s configuration name (as provided during the bootstrapping): 1 What is the sam application stack name for stage 2? [sam-app]: fcj-book-store-backend-dev  What is the Git provider?\r1 - Bitbucket\r2 - CodeCommit\r3 - GitHub\r4 - GitHubEnterpriseServer\rChoice []: 2\rWhat is the CodeCommit repository name?: fcj-book-store-backend\rWhat is the Git branch used for production deployments? [main]: main\rWhat is the template file path? [template.yaml]: template.yaml\rWe use the stage configuration name to automatically retrieve the bootstrapped resources created when you ran `sam pipeline bootstrap`.\rHere are the stage configuration names detected in .aws-sam/pipeline/pipelineconfig.toml:\r1 - dev\r2 - prod\rSelect an index or enter the stage 1\u0026#39;s configuration name (as provided during the bootstrapping): 1\rWhat is the sam application stack name for stage 1? [sam-app]: fcj-book-store-backend-dev\rStage 1 configured successfully, configuring stage 2.\rHere are the stage configuration names detected in .aws-sam/pipeline/pipelineconfig.toml:\r1 - dev\r2 - prod\rSelect an index or enter the stage 2\u0026#39;s configuration name (as provided during the bootstrapping): 1\rWhat is the sam application stack name for stage 2? [sam-app]: fcj-book-store-backend-dev\rStage 2 configured successfully.\rTo deploy this template and connect to the main git branch, run this against the leading account:\r`sam deploy -t codepipeline.yaml --stack-name \u0026lt;stack-name\u0026gt; --capabilities=CAPABILITY_IAM`.\rSUMMARY\rWe will generate a pipeline config file based on the following information:\rWhat is the Git provider?: CodeCommit\rWhat is the CodeCommit repository name?: fcj-book-store-backend\r…………………\rWhat is the ECR repository URI for stage 2?: What is the AWS region for stage 2?: ap-southeast-1\rSuccessfully created the pipeline configuration file(s):\r- codepipeline.yaml\r- assume-role.sh\r- pipeline/buildspec_unit_test.yml\r- pipeline/buildspec_build_package.yml\r- pipeline/buildspec_integration_test.yml\r- pipeline/buildspec_feature.yml\r- pipeline/buildspec_deploy.yml Sau khi hoàn thành, SAM project có cấu trúc như sau  └── fcj-book-store-sam-ws7\r├── codepipeline.yaml # (new) CodePipeline CloudFormation template\r├── assume-role.sh # (new) Helper script for CodePipeline\r├── pipeline/ # (new) Build Specs for CodeBuild\r├── events\r├── fcj-book-store/ # SAM application root\r├── README.md\r└── template.yaml # SAM template Triển khai mẫu CloudFormation pipeline  Chạy các câu lệnh sau để tải những thư mục và tệp mới được tạo lên CodeCommit repository  git add .\rgit commit -m \u0026#34;Adding SAM CI/CD Pipeline definition\u0026#34;\rgit push Sau đó, triển khai SAM Pipelines bằng câu lệnh sau:  sam deploy -t codepipeline.yaml --stack-name fcj-book-store-backend-pipeline --capabilities=CAPABILITY_IAM Đợi một lúc, trở lại với bảng điều khiển của CloudFormation để kiểm tra   Tải lại danh sách stack Ấn chọn fcj-book-store-backend  Mở bảng điều khiển của CodePipeline  Một pipeline đang được xử lý  Đợi một lúc để xử lý pipeline hoàn thành  Trở lại bảng điều khiển của CloudFormation, tải lại danh sách các stacks   Ấn chọn fcj-book-store-backend-dev Ấn tab Outputs Ghi lại URL của API để dùng cho bước sau  Vậy là chúng ta đã triển khai thành công SAM Pipeline. Bước tiếp theo chúng ta sẽ triển khi pipeline cho phần front-end của ứng dụng web.\n"
},
{
	"uri": "/vi/2-build-sam-pipeline/",
	"title": "Xây dựng SAM pipeline",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tìm hiểu cách tự động hoá việc xây dựng, đóng gói và triển khai các lệnh bằng cách tạo một đường dẫn phân phối liên tục sử dụng AWS Code Pipeline. Chúng ta sẽ sử dụng SAM Pipelines để tạo và tự động cập nhật, CI/CD pipeline nhiều giai đoạn.\nAWS SAM Pipelines SAM Pipelines hoạt động bằng cách tạo một tập hợp các tệp cấu hình và cơ sở hạ tầng mà bạn sử dụng để tạo và quản lý hệ thống CI / CD của mình. SAM Pipelines có thể khởi tạo các pipeline CI/CD cho các nhà cung cấp sau:\n Jenkins GitLab CI/CD GitHub Actions Bitbucket Pipelines AWS CodePipeline  SAM Pipelines tạo các tệp cấu hình thích hợp cho nhà cung cấp CI/CD. Ví dụ: khi sử dụng GitHub Actions, SAM sẽ tổng hợp một tệp .github/workflows/pipeline.yaml. Tệp này xác định pipeline CI/CD sử dụng GitHub Actions. Trong bài này chúng ta sẽ sử dụng AWS CodePipeline. SAM tạo nhiều tệp, một trong số đó là CloudFormation template là codepipeline.yaml. Mẫu này xác định nhiều tài nguyên AWS hoạt động cùng nhau để triển khai ứng dụng không máy chủ một cách tự động.\nNội dung  Tạo Git repository Tạo SAM pipeline  "
},
{
	"uri": "/vi/3-build-frontend-pipeline/",
	"title": "Xây dựng pipeline cho frontend ",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ tạo một pipeline mới với AWS CodePipeline bằng bảng điều khiển cho S3 Single Page Application. Sử dụng CodeCommit repository lưu source code, CodeBuild để xây dựng ứng dụng và S3 để triển khai ứng dụng\nNội dung  Tạo Git repository Tạo pipeline  "
},
{
	"uri": "/vi/4-test-operation/",
	"title": "Kiểm tra hoạt động",
	"tags": [],
	"description": "",
	"content": "Bạn có thể tải tệp ảnh ở đây để thêm dữ liệu để kiểm tra hoạt động của các dịch vụ\n\r\rImage\r\r\rPythonCoding.jpeg\r\r(1095 ko)\r\r\r\r Ấn nút Register ở góc trên bên phải màn hình  Nhập thông tin để đăng ký tài khoản: email, mật khẩu và xác thực lại mật khẩu   Ấn Register  Mở email mà bạn đăng ký, sau đó tìm đến tin nhắn từ no-reply@vertificationemail.com để lấy mã xác thực tài khoản  Nhập mã xác thực vào màn hình xác thực   Ấn Submit  Nhập thông tin tài khoản của bạn: email và mật khẩu để đăng nhập  Như vậy web đã đăng nhập và đăng ký bình thường. Chúng ta sẽ kiểm tra chức năng thêm sách mới   Ấn tab Create new book Nhập ID: 1 Nhập tên sách: Python Coding Nhập tác giả: Doan Minh Phung Nhập thể loại: IT Nhập giá: 5.6 Nhập mô tả: Guide to basic of Python in real projects Ấn Choose File và chọn tệp ảnh PythonCoding.jpeg mà bạn vừa tải về Ấn Create  Ấn OK  Một sách mới đã được thêm vào cơ sở dữ liệu  Chúng ta đã hoàn thành workshop, đã biết tạo SAM pipeline và pipeline bằng bảng điều khiển. Bài tiếp theo chúng ta tìm hiểu về gỡ lỗi, giám sát AWS Lambda với AWS CloudWatch và AWS X-ray\n"
},
{
	"uri": "/vi/5-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": " Làm rỗng S3 bucket   Mở bảng điều khiển của AWS S3 Chọn fcj-book-store Ấn Empty Nhập permanently delete Ấn Empty Làm tương tự với bucket bắt đầu bằng aws-sam-cli-managed-default- và bucket book-image-resize-store  Xoá pipeline   Mở bảng điều khiển của AWS CodePipeline Chọn pipeline fcj-book-store-frontend-pipeline Ấn Delete pipeline Nhập delete Ấn Delete Làm tương tự với các pipeline còn lại  Xoá stack của CloudFormation và CodeCommit repository   Chạy câu lệnh dưới đây:  aws codecommit delete-repository --repository-name fcj-book-store-backend\raws codecommit delete-repository --repository-name fcj-book-store-frontend\rsam delete --stack-name fcj-book-store-backend-dev\rsam delete --stack-name fcj-book-store-backend-pipeline\rsam delete --stack-name aws-sam-cli-managed-dev-pipeline-resources "
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]