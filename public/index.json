[
{
	"uri": "/2-build-sam-pipeline/2-1-create-git-repo/",
	"title": "Create Git repository",
	"tags": [],
	"description": "",
	"content": " Run the following command to create a new CodeCommit repository  aws codecommit create-repository --repository-name fcj-book-store-backend You should see output similar to the following:\n{\r\u0026#34;repositoryMetadata\u0026#34;: {\r\u0026#34;accountId\u0026#34;: \u0026#34;111111111111\u0026#34;,\r\u0026#34;repositoryId\u0026#34;: \u0026#34;b782c34e-77dc-4627-8aea-ae8bd5ea46c3\u0026#34;,\r\u0026#34;repositoryName\u0026#34;: \u0026#34;fcj-book-store-backend\u0026#34;,\r\u0026#34;lastModifiedDate\u0026#34;: \u0026#34;2022-09-19T11:49:51.325000+07:00\u0026#34;,\r\u0026#34;creationDate\u0026#34;: \u0026#34;2022-09-19T11:49:51.325000+07:00\u0026#34;,\r\u0026#34;cloneUrlHttp\u0026#34;: \u0026#34;https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-backend\u0026#34;,\r\u0026#34;cloneUrlSsh\u0026#34;: \u0026#34;ssh://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-backend\u0026#34;,\r\u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:codecommit:ap-southeast-1:111111111111:fcj-book-store-backend\u0026#34;\r}\r}  Open AWS CodeCommit console to check repository  Run the below commands at the sam project folder you downloaded - fcj-book-store-sam-ws7 to initialize a local Git repository, add code and push to CodeCommit repository.  git init -b main\recho -e \u0026#34;\\n\\n.aws-sam\u0026#34; \u0026gt;\u0026gt; .gitignore\rgit add .\rgit commit -m \u0026#34;Initial commit\u0026#34; Add your CodeCommit repository URL as a remote on your local git project.  git remote add origin codecommit://fcj-book-store-backend \rIf origin already exists or url is wrong, can remove it by running: git remote rm origin\n\rPush code to CodeCommit repository by running the following command:  git push -u origin main Back to CodeCommit console   Click fcj-book-store-backend repository, you will see the code has been uploaded  "
},
{
	"uri": "/3-build-frontend-pipeline/3-1-create-git-repo/",
	"title": "Create Git repository ",
	"tags": [],
	"description": "",
	"content": " Update source code of front-end   Open config.js file in source code folder of front-end you downloaded - fcj-serverless-frontend. Next, replace value of APP_API_URL with URL that you recorded from the previous step Uncomment line 4 and replace value with an email that will register account   Open Login.js file in fcj-serverless-frontend/src/component/Authen/ folder, uncomment lines 39 and 41  Create a new buildspect.yaml file in fcj-serverless-frontend/ folder. Copy the following script into that file  version: 0.2\rphases:\rinstall:\rruntime-versions:\rnodejs: latest\rcommands:\r# install yarn\r- npm install yarn\r# install dependencies\r- yarn\r# so that build commands work\r- yarn add eslint-config-react-app\rbuild:\rcommands:\r# run build script\r- yarn build\rartifacts:\r# include all files required to run application\r# we include only the static build files\rfiles:\r- \u0026#39;**/*\u0026#39;\rbase-directory: \u0026#39;build\u0026#39; Run the following to create CodeCommit repository for front-end code  aws codecommit create-repository --repository-name fcj-book-store-frontend You will see output similar to the following\n{\r\u0026#34;repositoryMetadata\u0026#34;: {\r\u0026#34;accountId\u0026#34;: \u0026#34;111111111111\u0026#34;,\r\u0026#34;repositoryId\u0026#34;: \u0026#34;b782c34e-77dc-4627-8aea-ae8bd5ea79a9\u0026#34;,\r\u0026#34;repositoryName\u0026#34;: \u0026#34;fcj-book-store-frontend\u0026#34;,\r\u0026#34;lastModifiedDate\u0026#34;: \u0026#34;2022-09-19T14:49:51.325000+07:00\u0026#34;,\r\u0026#34;creationDate\u0026#34;: \u0026#34;2022-09-19T14:49:51.325000+07:00\u0026#34;,\r\u0026#34;cloneUrlHttp\u0026#34;: \u0026#34;https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-frontend\u0026#34;,\r\u0026#34;cloneUrlSsh\u0026#34;: \u0026#34;ssh://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/fcj-book-store-frontend\u0026#34;,\r\u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:codecommit:ap-southeast-1:111111111111:fcj-book-store-frontend\u0026#34;\r}\r}  Open CodeCommit console to check repository  Run the commands below at the root of the front-end project to initialize a local Git repository, add the code to it.  git init -b main\rgit add .\rgit commit -m \u0026#34;Initial commit\u0026#34; Add your CodeCommit repository URL as a remote on your local git project.  git remote add origin codecommit://fcj-book-store-frontend \rIf origin already exists or url is wrong, can remove it by running: git remote rm origin\n\rPush code to CodeCommit repository by running the following command:  git push -u origin main Back to CodeCommit console   Click fcj-book-store-frontend repository, you will see the code has been uploaded  "
},
{
	"uri": "/1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Before doing the main content of this workshop, we prepare the SAM project and download the front-end source to your machine.\n Download theh below source code of SAM project  \r\rSAM source\r\r\rfcj-book-store-sam-ws7.zip\r\r(8275 ko)\r\r\r\rRun the following command  sam build Run the following command to clone fcj-serverless-frontend code to your device  git clone https://github.com/AWS-First-Cloud-Journey/FCJ-Serverless-Workshop Run the following command in the root folder of fcj-serverless-frontend to build project  yarn build We have prepared the necessary source for the next steps.\n"
},
{
	"uri": "/",
	"title": "Serverless - CI/CD with AWS CodePipeline",
	"tags": [],
	"description": "",
	"content": "Serverless - CI/CD with AWS CodePipeline Overview Continuous Integration, Continuous Delivery, Continuous Deployment (CI/CD) are software development practices for producing software in short cycles between merging source code changes and updating applications. The ultimate goal of these practices is to reduce the costs, time, and risks by delivering software in small pieces.\nIn workshop 7 of this series, we will know about CI/CD flow building so that every time you change and push source code on the git repository, it will automatically re-update our services and applications. There are many tools for us to build CI/CD, the most popular are Jenkins, Gitlab CI, Circle CI. In this workshop, we will use AWS\u0026rsquo;s CodePipeline.\nThe CI/CD Architecture for back-end:  The developer create a git repository on CodeCommit and pushes code of SAM project on it Every time the source code is updated, CodeBuild will automatically rebuild and prepare the CloudFormation template CloudFormation creates/updates serverless services  The CI/CD Architecture for website front-end:\n The developer creates a git repository on CodeCommit and pushes the front-end code on it Every time the source code is updated, CodeBuild will automatically rebuild and then package the build folder Finally, the build folder is pushed to the S3 bucket with the static hosting website enabled  CI/CD CI\nContinuous Integration is a software development practice in which developers regularly commit and push their local changes back to the shared repository (usually several times a day). By fetching and merging changes from other developers they mitigated the risk of complicated conflict resolution. Before each commit, developers can run unit tests locally on their source code as an additional check before integrating. A continuous integration service automatically builds and runs unit tests on the new source code changes to catch any errors immediately.\nCD\nContinuous Delivery is a software development practice that extends Continuous Integration in which source code changes are automatically prepared for deployment to a production instance. After a build, the build artifact with new changes is deployed to a staging instance where advanced (integration, acceptance, load, end-to-end, etc.) tests are run. If needed, the build artifact is automatically deployed to the production instance after manual approval.\nContinuous Deployment is a software development practice that extends Continuous Delivery in which source code changes are automatically deployed to a production instance. The difference between Continuous Delivery and Continuous Deployment is the presence of manual approval. With Continuous Delivery, deployment to production occurs automatically after manual approval. With Continuous Deployment, deployment to production occurs automatically without manual approval.\nContent  Preparation Build SAM pipeline Build pipeline for frontend Test web operation Cleanup  "
},
{
	"uri": "/2-build-sam-pipeline/",
	"title": "Build SAM pipeline",
	"tags": [],
	"description": "",
	"content": "In this chapter you are going to learn how to automate the build, package and deploy commands by creating a continous delivery pipeline using AWS Code Pipeline. We will be using SAM Pipelines to generate and a self-updating, multi-stage CI/CD pipeline.\nAWS SAM Pipelines SAM Pipelines works by creating a set of configuration and infrastructure files you use to create and manage your CI/CD pipeline.\nAs of this writing, SAM Pipelines can bootstrap CI/CD pipelines for the following providers:\n Jenkins GitLab CI/CD GitHub Actions Bitbucket Pipelines AWS CodePipeline  SAM Pipelines creates appropriate configuration files for your CI/CD provider of choice. For example, when using GitHub Actions SAM will synthesize a .github/workflows/pipeline.yaml file. This file defines your CI/CD pipeline using GitHub Actions. In this workshop we will be using AWS CodePipeline. As you will soon see, SAM creates multiple files, one of which is a CloudFormation template named codepipeline.yaml. This template defines multiple AWS resources that work together to deploy our serverless application automatically.\nContent  Create Git repository Create SAM pipeline  "
},
{
	"uri": "/3-build-frontend-pipeline/3-2-create-codepipeline/",
	"title": "Create pipeline ",
	"tags": [],
	"description": "",
	"content": " At the CodeCommit console, click Pipeline-CodePipeline on the left menu   Click Getting started Click Create pipeline  Enter pipeline name: fcj-book-store-frontend-pipeline   Select New service role to crate a new role Click Next  Select AWS CodeCommit is source provider   Select repository is fcj-book-store-frontend Select main branch Click Next  Select AWS CodeBuild is build provider   Select along with region of SAM pipeline Click Create new project  Enter project name: fcj-book-store-frontend   Select Ubuntu for OS  Select Standard for Rumtime(s) section   Select aws/codebuild/standard:5.0 for Image section  Can you enter buildspec.yaml for the name of Buildspec or not   Click Continue to CodePipeline  Select project you just created   Click Next  Select Amazon S3 is deploy provider   Select fcj-book-store bucket Check to Extract file before deploy Click Next  Scroll down to bottom and click Create pipeline  Wait for a while for the pipeline to be processed until it succeeds  Open Amazon S3 console  Click to fcj-book-store bucket  The files and folders after the build have been deployed on the S3 bucket  Click Properties tab  Scroll down to bottom and click website enpoint  So we have deployed a new pipeline for the source code of the front-end. The next step we will test the web running.\n"
},
{
	"uri": "/2-build-sam-pipeline/2-2-create-pipeline/",
	"title": "Create SAM pipeline",
	"tags": [],
	"description": "",
	"content": "There are three distinct steps with SAM Pipelines and AWS CodePipeline.\n Create required IAM roles and infrastructure Create CloudFormation pipeline template Deploy CloudFormation pipeline template  SAM Pipelines automates all of this for us\nCreate required IAM roles and infrastructure  Run the following command:  sam pipeline init --bootstrap Answer the questions with the following list:   Select a pipeline template to get started: AWS Quick Start Pipeline Templates (1) Select CI/CD system: AWS CodePipeline (5) Do you want to go through stage setup process now? [y/N]: y [1] Stage definition. Stage configuration name: dev [2] Account details. Select a credential source to associate with this stage: default (named profile) (2) Enter the region in which you want these resources to be created: Your region of choice Enter the pipeline IAM user ARN if you have previously … [] return/enter Enter the pipeline execution role ARN if you have previously … []: return/enter Enter the CloudFormation execution role ARN if you have previously … []: return/enter Please enter the artifact bucket ARN for your Lambda function. If you do not … []: return/enter Does your application contain any IMAGE type Lambda functions? [y/N]: N Press enter to confirm the values above … : return/enter Should we proceed with the creation? [y/N]: y  sam pipeline init generates a pipeline configuration file that your CI/CD system\rcan use to deploy serverless applications using AWS SAM.\rWe will guide you through the process to bootstrap resources for each stage,\rthen walk through the details necessary for creating the pipeline config file.\rPlease ensure you are in the root folder of your SAM application before you begin.\rSelect a pipeline template to get started:\r1 - AWS Quick Start Pipeline Templates\r2 - Custom Pipeline Template Location\rChoice: 1\rCloning from https://github.com/aws/aws-sam-cli-pipeline-init-templates.git (process may take a moment)\rSelect CI/CD system\r1 - Jenkins\r2 - GitLab CI/CD\r3 - GitHub Actions\r4 - Bitbucket Pipelines\r5 - AWS CodePipeline\rChoice: 5\rYou are using the 2-stage pipeline template.\r_________ _________ | | | |\r| Stage 1 |-\u0026gt;| Stage 2 |\r|_________| |_________|\rChecking for existing stages...\r[!] None detected in this account.\rDo you want to go through stage setup process now? If you choose no, you can still reference other bootstrapped resources. [y/N]: y\rFor each stage, we will ask for [1] stage definition, [2] account details, and [3]\rreference application build resources in order to bootstrap these pipeline\rresources.\rWe recommend using an individual AWS account profiles for each stage in your\rpipeline. You can set these profiles up using aws configure or ~/.aws/credentials. See\r[https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-getting-started-set-up-credentials.html].\rStage 1 Setup\r[1] Stage definition\rEnter a configuration name for this stage. This will be referenced later when you use the sam pipeline init command:\rStage configuration name: dev\r[2] Account details\rThe following AWS credential sources are available to use.\rTo know more about configuration AWS credentials, visit the link below:\rhttps://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html 1 - Environment variables (not available)\r2 - default (named profile)\r3 - produser (named profile)\rq - Quit and configure AWS credentials\rSelect a credential source to associate with this stage: 2\rAssociated account 885078239936 with configuration dev.\rEnter the region in which you want these resources to be created [ap-southeast-1]: ap-southeast-1\rEnter the pipeline IAM user ARN if you have previously created one, or we will create one for you []: [3] Reference application build resources\rEnter the pipeline execution role ARN if you have previously created one, or we will create one for you []: Enter the CloudFormation execution role ARN if you have previously created one, or we will create one for you []: Please enter the artifact bucket ARN for your Lambda function. If you do not have a bucket, we will create one for you []: Does your application contain any IMAGE type Lambda functions? [y/N]: n\r[4] Summary\rBelow is the summary of the answers:\r1 - Account: 885078239936\r2 - Stage configuration name: dev\r3 - Region: ap-southeast-1\r4 - Pipeline user: [to be created]\r5 - Pipeline execution role: [to be created]\r6 - CloudFormation execution role: [to be created]\r7 - Artifacts bucket: [to be created]\r8 - ECR image repository: [skipped]\rPress enter to confirm the values above, or select an item to edit the value: This will create the following required resources for the \u0026#39;dev\u0026#39; configuration: - Pipeline IAM user\r- Pipeline execution role\r- CloudFormation execution role\r- Artifact bucket\rShould we proceed with the creation? [y/N]: y\rCreating the required resources...\rChecking for existing stages... Once this completes, you will see output which looks like the following:\nSuccessfully created!\rThe following resources were created in your account:\r- Pipeline IAM user\r- Pipeline execution role\r- CloudFormation execution role\r- Artifact bucket\rPipeline IAM user credential:\rAWS_ACCESS_KEY_ID: AAAAAAAAAAAAIFRDVPDX\rAWS_SECRET_ACCESS_KEY: xxxxxxxxxxxxxxxxxxxxxxkMYI9RatNgVcIybUwh Open CloudFormation console  Click Stacks on the left menu to check if the stack has been created.   Click to the displayed stack  Click Resources tab, resources have been initialized  Back to the SAM pipeline creation screen   Enter \u0026ldquo;N\u0026rdquo; to not create a second stage  Create CloudFormation pipeline template We continue to create a CloudFormation template that defines the entire CI/CD pipeline\n Answer the questions with the following list:   What is the Git provider? Choice []: CodeCommit (2) What is the CodeCommit repository name?: fcj-book-store-backend What is the Git branch used for production deployments? [main]: main What is the template file path? [template.yaml]: template.yaml Select an index or enter the stage 1’s configuration name (as provided during the bootstrapping): 1 What is the sam application stack name for stage 1? [sam-app]: fcj-book-store-backend-dev Select an index or enter the stage 2’s configuration name (as provided during the bootstrapping): 1 What is the sam application stack name for stage 2? [sam-app]: fcj-book-store-backend-dev  What is the Git provider?\r1 - Bitbucket\r2 - CodeCommit\r3 - GitHub\r4 - GitHubEnterpriseServer\rChoice []: 2\rWhat is the CodeCommit repository name?: fcj-book-store-backend\rWhat is the Git branch used for production deployments? [main]: main\rWhat is the template file path? [template.yaml]: template.yaml\rWe use the stage configuration name to automatically retrieve the bootstrapped resources created when you ran `sam pipeline bootstrap`.\rHere are the stage configuration names detected in .aws-sam/pipeline/pipelineconfig.toml:\r1 - dev\r2 - prod\rSelect an index or enter the stage 1\u0026#39;s configuration name (as provided during the bootstrapping): 1\rWhat is the sam application stack name for stage 1? [sam-app]: fcj-book-store-backend-dev\rStage 1 configured successfully, configuring stage 2.\rHere are the stage configuration names detected in .aws-sam/pipeline/pipelineconfig.toml:\r1 - dev\r2 - prod\rSelect an index or enter the stage 2\u0026#39;s configuration name (as provided during the bootstrapping): 1\rWhat is the sam application stack name for stage 2? [sam-app]: fcj-book-store-backend-dev\rStage 2 configured successfully.\rTo deploy this template and connect to the main git branch, run this against the leading account:\r`sam deploy -t codepipeline.yaml --stack-name \u0026lt;stack-name\u0026gt; --capabilities=CAPABILITY_IAM`.\rSUMMARY\rWe will generate a pipeline config file based on the following information:\rWhat is the Git provider?: CodeCommit\rWhat is the CodeCommit repository name?: fcj-book-store-backend\r…………………\rWhat is the ECR repository URI for stage 2?: What is the AWS region for stage 2?: ap-southeast-1\rSuccessfully created the pipeline configuration file(s):\r- codepipeline.yaml\r- assume-role.sh\r- pipeline/buildspec_unit_test.yml\r- pipeline/buildspec_build_package.yml\r- pipeline/buildspec_integration_test.yml\r- pipeline/buildspec_feature.yml\r- pipeline/buildspec_deploy.yml Once this completes, your project should have the structure below  └── fcj-book-store-sam-ws7\r├── codepipeline.yaml # (new) CodePipeline CloudFormation template\r├── assume-role.sh # (new) Helper script for CodePipeline\r├── pipeline/ # (new) Build Specs for CodeBuild\r├── events\r├── fcj-book-store/ # SAM application root\r├── README.md\r└── template.yaml # SAM template Deploy CloudFormation pipeline template  Run the following commands to upload the newly created folders and files to the CodeCommit repository  git add .\rgit commit -m \u0026#34;Adding SAM CI/CD Pipeline definition\u0026#34;\rgit push Then, deplou SAM Pipeline by the following command:  sam deploy -t codepipeline.yaml --stack-name fcj-book-store-backend-pipeline --capabilities=CAPABILITY_IAM Wait for a while, back to the CloudFormation console to check   Reload the stack list Select fcj-book-store-backend stack  Open CodePipeline console  A pipeline is being processed  Wait for a while to to complete pipeline processing  Back to the CloudFormation console, reload the stack list   Select fcj-book-store-backend-dev stack Click Outputs tab Note down the API URL to use in the next step  So we have successfully deployed SAM Pipeline. The next step is to develop the pipeline for the front-end part of the web application.\n"
},
{
	"uri": "/3-build-frontend-pipeline/",
	"title": "Build pipeline for front-end",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will create a new pipeline with AWS CodePipeline by console for S3 Single Page Application. Using CodeCommit repository to saves source code, CodeBuild to build application and S3 to deploy application.\nNội dung  Create Git repository Create pipeline  "
},
{
	"uri": "/4-test-operation/",
	"title": "Test web operation",
	"tags": [],
	"description": "",
	"content": "You can download the image files here to add data to check the operation of the services\n\r\rImages\r\r\rPythonCoding.jpeg\r\r(1095 ko)\r\r\r\r Click Register button on the upper right corner of the screen  Enter information to register an account: email, password and re-validate password   Click Register  Open the email you register, then find the message from no-reply@vertificationemail.com to get verify code  Enter verify code to verify screen   Click Submit  Enter your account information: email and password to login  So the web has logged in and registered normally. Next, we will test the function of adding a new book   Click tab Create new book Enter ID: 1 Enter book name: Python Coding Enter author: Doan Minh Phung Enter category: IT Enter price: 5.6 Enter description: Guide to basic of Python in real projects Click Choose File and select PythonCoding.jpeg that downloaded Click Create  Click OK  A new book has been added to the database  We have completed the workshop, already know how to create the SAM pipeline and pipeline using the console. Next workshop we learn about debugging, monitoring AWS Lambda with AWS CloudWatch and AWS X-ray\n"
},
{
	"uri": "/5-cleanup/",
	"title": "Cleanup",
	"tags": [],
	"description": "",
	"content": " Empty S3 bucket   Open AWS S3 console Select fcj-book-store Click Empty Enter permanently delete Click Empty Do the same for bucket starting with aws-sam-cli-managed-default- and book-image-resize-store bucket  Delete pipeline   Open AWS CodePipeline console Select fcj-book-store-frontend-pipeline pipeline Click Delete pipeline Enter delete Click Delete  Delete CloudFormation stacks and CodeCommit repository   Execute the below commands:  aws codecommit delete-repository --repository-name fcj-book-store-backend\raws codecommit delete-repository --repository-name fcj-book-store-frontend\rsam delete --stack-name fcj-book-store-backend-dev\rsam delete --stack-name fcj-book-store-backend-pipeline\rsam delete --stack-name aws-sam-cli-managed-dev-pipeline-resources "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]